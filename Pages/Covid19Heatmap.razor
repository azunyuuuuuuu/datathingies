@page "/covid19/heatmap"
@page "/covid19/heatmap/{isocode}"
@page "/covid19/heatmap/{isocode}/{datamode}"

@using System.Collections.ObjectModel
@using datathingies.Data
@using Humanizer
@inject Covid19DataService _covid
@inject NavigationManager _nav

<div class="markdown">

    <h1>Covid19 Data</h1>

    @if (countries == null)
    {
        <LoadingSpinner></LoadingSpinner>
    }
    else
    {

        <p>
            <label>
                Country:
                <select class="dark:bg-gray-800 dark:text-gray-100 px-2 py-1" value="@IsoCode" @onchange="CountrySelectionChanged" @onkeypress:preventDefault>
                    <option value="">Select a country ...</option>
                    @foreach (var item in countries)
                    {
                        <option value="@item.IsoCode.ToLower()">@item.Location</option>
                    }
                </select>
            </label>
            <label>
                Data Mode:
                <select class="dark:bg-gray-800 dark:text-gray-100 px-2 py-1" value="@DataMode" @onchange="DataModeSelectionChanged" @onkeypress:preventDefault>
                    @foreach (var item in Enum.GetNames(typeof(Covid19DataService.DataModes)))
                    {
                        <option value="@item.ToLower()">@item.Humanize()</option>
                    }
                </select>
            </label>
        </p>

        @if (isloading)
        {
            <LoadingSpinner></LoadingSpinner>
        }
        else
        {
            @if (heatmapcases == null)
            {
                <p><em>Choose a country to show the heatmap data...</em></p>
            }
            else
            {
                <h2> Heatmap </h2>

                <div class="container">
                    <div class="lg:grid lg:grid-flow-col lg:space-x-8 w-full">

                        <div>
                            <h3>@GetCurrentModeAsHumanizedString()</h3>
                            <table class="table-fixed w-full">
                                <thead>
                                    <th class="w-1/6 sm:w-auto">Week</th>
                                    <th class="hidden lg:inline"></th>
                                    <th class="text-right w-1/8">Mo</th>
                                    <th class="text-right w-1/8">Tu</th>
                                    <th class="text-right w-1/8">We</th>
                                    <th class="text-right w-1/8">Th</th>
                                    <th class="text-right w-1/8">Fr</th>
                                    <th class="text-right w-1/8">Sa</th>
                                    <th class="text-right w-1/8">Su</th>
                                    <th class="hidden lg:inline text-right w-1/8">sum</th>
                                </thead>
                                <tbody>
                                    <CascadingValue Value="heatmapMetadata">
                                        @foreach (var entry in heatmapcases)
                                        {
                                            <HeatmapDataRow Data="@entry" />
                                        }
                                    </CascadingValue>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        }
    }

    <div class="mx-16 text-center text-xs font-thin">
        <span>Data Source:</span>
        <a href="https://ourworldindata.org/coronavirus">Max Roser, Hannah Ritchie, Esteban Ortiz-Ospina and Joe Hasell (2020) - "Coronavirus Pandemic (COVID-19)". Published online at OurWorldInData.org. Retrieved from: 'https://ourworldindata.org/coronavirus' [Online Resource]</a>
    </div>
</div>

@code {
    private IEnumerable<Covid19IndexData> countries;

    [Parameter]
    public string IsoCode { get; set; } = string.Empty;
    [Parameter]
    public string DataMode { get; set; } = Covid19DataService.DataModes.Cases.ToString();

    private ICollection<Covid19WeeklyData> heatmapcases;
    private HeatmapMetadata heatmapMetadata = new HeatmapMetadata();

    private bool isloading = false;
    protected override async Task OnInitializedAsync()
    {
        await _covid.InitializeData();
        countries = await _covid.GetCountries();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(IsoCode) && countries.Select(x => x.IsoCode.ToLower()).Contains(IsoCode.ToLower()))
        {
            isloading = true;
            StateHasChanged();

            var datamode = Enum.Parse<Covid19DataService.DataModes>(DataMode ?? Covid19DataService.DataModes.Cases.ToString(), true);
            heatmapcases = new Collection<Covid19WeeklyData>((await _covid.GetHeatmapForCountryMode(IsoCode, datamode)).ToList());

            heatmapMetadata = await _covid.GetHeatmapMetadataForCountryMode(IsoCode,datamode);
            heatmapMetadata = heatmapMetadata with {
                MinWeeklyValue=0,
                MaxWeeklyValue=heatmapcases.Max(x=>x.Weekly??0)
            };

            isloading=false;
        }
        else
        {
            heatmapcases = null;
        }
    }

    private void CountrySelectionChanged(ChangeEventArgs e)
    {
        var isocode = ((string)e.Value).ToLower();
        var mode = (DataMode ?? Covid19DataService.DataModes.Cases.ToString()).ToLower();
        _nav.NavigateTo($"covid19/heatmap/{isocode}/{mode}");
    }

    private void DataModeSelectionChanged(ChangeEventArgs e)
    {
        var isocode = IsoCode.ToLower();
        var mode = ((string)e.Value).ToLower();
        _nav.NavigateTo($"covid19/heatmap/{isocode}/{mode}");
    }

    private string GetCurrentModeAsHumanizedString()
        => Enum.Parse<Covid19DataService.DataModes>(DataMode ?? Covid19DataService.DataModes.Cases.ToString(), true).Humanize();
}

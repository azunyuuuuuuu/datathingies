@page "/covid19/heatmap"
@page "/covid19/heatmap/{country}"
@page "/covid19/heatmap/{country}/{datamode}"

@using Microsoft.AspNetCore.Http.Extensions
@using datathingies.Data
@using Humanizer
@inject Covid19DataService _covid
@inject NavigationManager _nav

<div class="markdown">

    @*
        Cell Colors Hue Sat Lum
        Green: #63BE7B 96 105 145
        Yellow: #FFEB84 35 355 194
        Red: #F8696B 254 232 177
    *@

    <h1>Covid19 Data</h1>

    @if (countries == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <p>
            <label>
                Country:
                <select value="@Country" @onchange="CountrySelectionChanged" @onkeypress:preventDefault>
                    <option value="">Select a country ...</option>
                    @foreach (var item in countries)
                    {
                        <option value="@item.ToLower()">@item</option>
                    }
                </select>
            </label>
            <label>
                Country:
                <select value="@DataMode" @onchange="DataModeSelectionChanged" @onkeypress:preventDefault>
                    @foreach (var item in Enum.GetNames(typeof(DataTypes)))
                    {
                        <option value="@item.ToLower()">@item</option>
                    }
                </select>
            </label>
        </p>
    }

    @if (heatmapcases == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <h2> Heatmap </h2>

        <div class="container">
            <div class="lg:grid lg:grid-flow-col lg:space-x-8 w-full">

                <div>
                    <h3>Cases</h3>
                    <table class="table-fixed w-full">
                        <thead>
                            <th class="">Week</th>
                            <th class=""></th>
                            <th class="text-right w-1/8">Mo</th>
                            <th class="text-right w-1/8">Tu</th>
                            <th class="text-right w-1/8">We</th>
                            <th class="text-right w-1/8">Th</th>
                            <th class="text-right w-1/8">Fr</th>
                            <th class="text-right w-1/8">Sa</th>
                            <th class="text-right w-1/8">Su</th>
                            <th class="text-right w-1/8">sum</th>
                        </thead>
                        <tbody>
                            @foreach (var entry in heatmapcases)
                            {
                                <tr>
                                    <td>@entry.Week</td>

                                    <td>@entry.Month</td>

                                    <td class="text-right" data-color="">
                                        @entry.Monday?.ToString("#,##0")</td>

                                    <td class="text-right" data-color="">
                                        @entry.Tuesday?.ToString("#,##0")</td>

                                    <td class="text-right" data-color="">
                                        @entry.Wednesday?.ToString("#,##0")</td>

                                    <td class="text-right" data-color="">
                                        @entry.Thursday?.ToString("#,##0")</td>

                                    <td class="text-right" data-color="">
                                        @entry.Friday?.ToString("#,##0")</td>

                                    <td class="text-right" data-color="">
                                        @entry.Saturday?.ToString("#,##0")</td>

                                    <td class="text-right" data-color="">
                                        @entry.Sunday?.ToString("#,##0")</td>
                                    
                                    <td class="text-right" data-color="">
                                        @entry.Weekly?.ToString("#,##0")
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>


            </div>
        </div>
    }


</div>

@code {
    private IEnumerable<string> countries;

    [Parameter]
    public string Country { get; set; } = string.Empty;
    [Parameter]
    public string DataMode { get; set; } = DataTypes.Cases.ToString();

    private IEnumerable<Covid19WeeklyData> heatmapcases;

    protected override async Task OnInitializedAsync()
    {
        await _covid.InitializeData();
        countries = _covid.GetCountries();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(Country) && countries.Select(x => x.ToLower()).Contains(Country.ToLower()))
        {
            var temp = _covid.GetDataForCountry(Country)
                .Select(x => Enum.Parse<DataTypes>(DataMode??DataTypes.Cases.ToString(), true) switch
                {
                    DataTypes.Cases=>  new DataMiddle (x.Date,x.NewCases??0),
                    DataTypes.Deaths=>  new DataMiddle (x.Date,x.NewDeaths??0),
                    DataTypes.CasesSmoothed=>  new DataMiddle (x.Date,x.NewCasesSmoothed??0),
                    DataTypes.DeathsSmoothed=>  new DataMiddle (x.Date,x.NewDeathsSmoothed??0),
                    DataTypes.Vaccinations=>  new DataMiddle (x.Date,x.NewVaccinations??0),
                    DataTypes.VaccinationsSmoothed=>  new DataMiddle (x.Date,x.NewVaccinationsSmoothed??0),
                    _ => new DataMiddle(x.Date, 0)
                })                ;

            heatmapcases = temp.GroupBy(x => x.date.WeekYear())
                .Select(x => new Covid19WeeklyData
            {
                Week = x.Key,
                Month = x.FirstOrDefault().date.ToString("MMMM"),
                Monday = x.FirstOrDefault(x => x.date.DayOfWeek == DayOfWeek.Monday)?.value,
                Tuesday = x.FirstOrDefault(x => x.date.DayOfWeek == DayOfWeek.Tuesday)?.value,
                Wednesday = x.FirstOrDefault(x => x.date.DayOfWeek == DayOfWeek.Wednesday)?.value,
                Thursday = x.FirstOrDefault(x => x.date.DayOfWeek == DayOfWeek.Thursday)?.value,
                Friday = x.FirstOrDefault(x => x.date.DayOfWeek == DayOfWeek.Friday)?.value,
                Saturday = x.FirstOrDefault(x => x.date.DayOfWeek == DayOfWeek.Saturday)?.value,
                Sunday = x.FirstOrDefault(x => x.date.DayOfWeek == DayOfWeek.Sunday)?.value,
                Weekly= x.Sum(x=>x.value),
            })
                .OrderByDescending(x => x.Week);
        }
    }

    private void CountrySelectionChanged(ChangeEventArgs e)
    {
        _nav.NavigateTo($"/covid19/heatmap/{((string)e.Value).ToLower()}");
    }
    private void DataModeSelectionChanged(ChangeEventArgs e)
    {
        _nav.NavigateTo($"/covid19/heatmap/{Country.ToLower()}/{(string)e.Value}");
    }

    public record DataMiddle(DateTime date, double value=0);

    public enum DataTypes
    {
        Cases,
        CasesSmoothed,
        Deaths,
        DeathsSmoothed,
        Vaccinations,
        VaccinationsSmoothed,
    }
}

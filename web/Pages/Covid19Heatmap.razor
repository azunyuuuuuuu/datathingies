@page "/covid19/heatmap"
@page "/covid19/heatmap/{isocode}"

@using System.Collections.ObjectModel
@using datathingies.Components
@using datathingies.Data
@using Humanizer
@inject Covid19DataService _covid
@inject NavigationManager _nav

<div class="markdown max-w-none">

    <h1>Covid19 Data</h1>

    @if (countries == null)
    {
        <LoadingElement></LoadingElement>
    }
    else
    {
        <p>
            <label>
                Country:
                <select class="dark:bg-zinc-700 dark:text-zinc-100 px-2 py-1" value="@IsoCode"
                @onchange="CountrySelectionChanged" @onkeypress:preventDefault>
                    <option value="">Select a country ...</option>
                    @foreach (var group in countries.GroupBy(x => x.Continent).OrderBy(x => x.Key))
                    {
                        <optgroup label=@(string.IsNullOrWhiteSpace(group.Key)?"Global":group.Key)>
                            @foreach (var item in group)
                            {
                                <option value="@item.IsoCode.ToLower()">@item.Location</option>
                            }
                        </optgroup>
                    }
                </select>
            </label>
        </p>

        @if (isloading)
        {
            <LoadingElement></LoadingElement>
        }
        else
        {
            @if (string.IsNullOrWhiteSpace(IsoCode))
            {
                <p><em>Choose a country to show the heatmap data...</em></p>
            }
            else
            {
                <h2> Cases </h2> @((MarkupString)_svgCases)

                <h2> Deaths </h2> @((MarkupString)_svgDeaths)

                <h2> Vaccinations </h2> @((MarkupString)_svgVaccinations)

                <h2> Cases Smoothed </h2> @((MarkupString)_svgCasesSmoothed)

                <h2> Deaths Smoothed </h2> @((MarkupString)_svgDeathsSmoothed)

                <h2> Vaccinations Smoothed </h2> @((MarkupString)_svgVaccinationsSmoothed)

                <h2> Hospital Patients </h2> @((MarkupString)_svgHospitalPatients)

                <h2> ICU Patients </h2> @((MarkupString)_svgIcuPatients)
            }
        }
    }

    <div class="mx-16 text-center text-xs font-thin">
        <span>Data Source:</span>
        <a href="https://ourworldindata.org/coronavirus">Max Roser, Hannah Ritchie, Esteban Ortiz-Ospina and Joe Hasell
            (2020) - "Coronavirus Pandemic (COVID-19)". Published online at OurWorldInData.org. Retrieved from:
            'https://ourworldindata.org/coronavirus' [Online Resource]</a>
    </div>
</div>

@code {
    private IEnumerable<Covid19IndexData> countries;

    [Parameter]
    public string IsoCode { get; set; } = string.Empty;

    private string _svgCases = string.Empty;
    private string _svgDeaths = string.Empty;
    private string _svgVaccinations = string.Empty;
    private string _svgCasesSmoothed = string.Empty;
    private string _svgDeathsSmoothed = string.Empty;
    private string _svgVaccinationsSmoothed = string.Empty;
    private string _svgHospitalPatients = string.Empty;
    private string _svgIcuPatients = string.Empty;

    private bool isloading = false;
    protected override async Task OnInitializedAsync()
    {
        await _covid.InitializeData();
        countries = await _covid.GetCountries();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(IsoCode) && countries.Select(x => x.IsoCode.ToLower()).Contains(IsoCode.ToLower()))
        {
            isloading = true;
            StateHasChanged();

            _svgCases = await _covid.GetHeatmapSvgForCountryMode(IsoCode, "Cases");
            _svgDeaths = await _covid.GetHeatmapSvgForCountryMode(IsoCode, "Deaths");
            _svgVaccinations = await _covid.GetHeatmapSvgForCountryMode(IsoCode, "Vaccinations");
            _svgCasesSmoothed = await _covid.GetHeatmapSvgForCountryMode(IsoCode, "CasesSmoothed");
            _svgDeathsSmoothed = await _covid.GetHeatmapSvgForCountryMode(IsoCode, "DeathsSmoothed");
            _svgVaccinationsSmoothed = await _covid.GetHeatmapSvgForCountryMode(IsoCode, "VaccinationsSmoothed");
            _svgHospitalPatients = await _covid.GetHeatmapSvgForCountryMode(IsoCode, "HospitalPatients");
            _svgIcuPatients = await _covid.GetHeatmapSvgForCountryMode(IsoCode, "IcuPatients");

            isloading = false;
        }
        else
        {
            _svgCases = string.Empty;
        }
    }

    private void CountrySelectionChanged(ChangeEventArgs e)
    {
        var isocode = ((string)e.Value).ToLower();
        _nav.NavigateTo($"covid19/heatmap/{isocode}");
    }
}
